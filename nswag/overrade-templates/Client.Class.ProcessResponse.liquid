{% assign exceptions = "401:Server.Core.Exceptions.UnauthorizedException,400:Server.Core.Exceptions.BadRequestException,405:Server.Core.Exceptions.MethodNotAllowedException,412:Server.Core.Exceptions.PreconditionFailedException,413:Server.Core.Exceptions.PayloadTooLargeException,415:Server.Core.Exceptions.UnsupportedMediaTypeException,451:Server.Core.Exceptions.UserException,500:Server.Core.Exceptions.ApiException,501:Server.Core.Exceptions.ApiException,502:Server.Core.Exceptions.BadGatewayException,503:Server.Core.Exceptions.ServiceUnavailableException,504:Server.Core.Exceptions.GatewayTimeoutException" | split: ','%}
{% for exception in exceptions %}
    {% assign exceptionObjects = exception | split: ':' %}
    {% if response.StatusCode == exceptionObjects[0] -%}
    {% assign exceptionClass = exceptionObjects[1] %}
    {% endif -%}
{% endfor %}
{% if response.HasType -%}
{%     if response.IsFile -%}
{%         if response.IsSuccess -%}
var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
var fileResponse_ = new FileResponse((int)response_.StatusCode, responseStream_, {% if InjectHttpClient %}null{% else %}client_{% endif %}, response_); 
client_ = null; response_ = null; // response and client are disposed by FileResponse
return fileResponse_;
{%         else -%}
var objectResponse_ = await ReadContentAsync<{{ response.Type }}>(response_.Content).ConfigureAwait(false);
throw new {{ exceptionClass }}("{{ response.ExceptionDescription }}", (int)response_.StatusCode, objectResponse_.Text, objectResponse_.Object);
{%         endif -%}
{%     else -%}
var result = await ReadContentAsync<{{ response.Type }}>(response_.Content).ConfigureAwait(false);
{%         if response.IsSuccess == false -%}
throw new {{ exceptionClass }}(result.Detail, result);
{%         else -%}
return result;
{%         endif -%}
{%     endif -%}
{% elseif response.IsSuccess -%}
{%     if operation.HasResultType -%}
{%         if operation.WrapResponse -%}
return new {{ ResponseClass }}<{{ operation.UnwrappedResultType }}>((int)response_.StatusCode, default({{ operation.UnwrappedResultType }})); 
{%         else -%}
return default({{ operation.UnwrappedResultType }});
{%         endif -%}
{%     else -%}
{%         if operation.WrapResponse -%}
return new {{ ResponseClass }}((int)response_.StatusCode); 
{%         else -%}
return;
{%         endif -%}
{%     endif -%}
{% else -%}{% comment %} implied: `if !response.HasType` so just read it as text {% endcomment %}
var apiProblemDetails = await ReadContentAsync<{{ response.Type }}>(response_.Content).ConfigureAwait(false);
throw new {{ exceptionClass }}(apiProblemDetails.Detail, apiProblemDetails);
{% endif -%}